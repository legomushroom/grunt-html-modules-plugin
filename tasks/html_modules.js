// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";  module.exports = function(grunt) {
    var $, Files, data, filesStorage, fs;

    fs = require('fs');
    $ = require('jquery');
    data = {};
    Files = (function() {
      function Files(o) {
        this.o = o;
        this.fs = fs;
        this.dir = 'tasks/src/';
        this.files = {};
      }

      Files.prototype.readFiles = function() {
        var _this = this;

        this.dfr = new $.Deferred;
        this.fs.readdir(this.dir, function(err, files) {
          if (err) {
            throw err;
          }
          files = _this.getValidFiles(files);
          return files.forEach(function(file, i) {
            return fs.readFile(_this.dir + file, 'utf-8', function(err, html) {
              err && ((function() {
                throw err;
              })());
              _this.files[file.split('.')[0]] = html;
              if (i === files.length - 1) {
                return _this.dfr.resolve(_this.files);
              }
            });
          });
        });
        return this.dfr.promise();
      };

      Files.prototype.getValidFiles = function(files) {
        return files.filter(function(file) {
          return file.match(/.html$/gi);
        });
      };

      return Files;

    })();
    filesStorage = new Files;
    return grunt.registerMultiTask("html_modules", "allows to include small html parts in other html", function() {
      var FilesChanged, filesChanged;

      FilesChanged = (function() {
        function FilesChanged(o) {
          var _this = this;

          this.o = o;
          this.jsonTags = [];
          filesStorage.readFiles().then(function(files) {
            return _this.getFiles();
          });
        }

        FilesChanged.prototype.getFiles = function() {
          var _this = this;

          return this.o.files.forEach(function(f) {
            var file, src, z, _i, _len, _results;

            _this.f = f;
            src = f.src.filter(function(filepath) {
              filepath = filepath;
              if (!grunt.file.exists(filepath)) {
                grunt.log.warn("Source file \"" + filepath + "\" not found.");
                return false;
              } else {
                return true;
              }
            }).map(function(filepath) {
              return grunt.file.read(filepath);
            });
            _results = [];
            for (z = _i = 0, _len = src.length; _i < _len; z = ++_i) {
              file = src[z];
              _results.push(_this.renderFile({
                file: file,
                fileSrc: f
              }));
            }
            return _results;
          });
        };

        FilesChanged.prototype.renderFile = function(o) {
          var compiledFile, jsonTag, tagNum, _i, _len, _ref, _results;

          this.$destFile = this.wrapFile(o.file);
          this.$tags = this.getTagsInFile(this.$destFile);
          this.jsonTags = this.getJSONTags({
            tags: this.$tags
          });
          _ref = this.jsonTags;
          _results = [];
          for (tagNum = _i = 0, _len = _ref.length; _i < _len; tagNum = ++_i) {
            jsonTag = _ref[tagNum];
            compiledFile = this.compile({
              tagNum: tagNum,
              fileSrc: o.fileSrc,
              tags: this.$tags
            });
            if (this.wrapFile(compiledFile).find('layout').length > 0) {
              console.log('then');
              console.log(compiledFile);
              _results.push(this.renderFile({
                file: compiledFile,
                fileSrc: o.fileSrc
              }));
            } else {
              console.log('else');
              console.log(compiledFile);
              $(this.$tags[tagNum]).replaceWith(compiledFile);
              _results.push(grunt.file.write("dest/" + o.fileSrc.src[0], this.$destFile.html()));
            }
          }
          return _results;
        };

        FilesChanged.prototype.getJSONTags = function(o) {
          var attr, i, jsonTags, tagNum, _i, _j, _len, _ref, _ref1;

          jsonTags = [];
          for (tagNum = _i = 0, _ref = o.tags.length; 0 <= _ref ? _i < _ref : _i > _ref; tagNum = 0 <= _ref ? ++_i : --_i) {
            jsonTags[tagNum] = {};
            _ref1 = o.tags[tagNum].attributes;
            for (i = _j = 0, _len = _ref1.length; _j < _len; i = ++_j) {
              attr = _ref1[i];
              jsonTags[tagNum][attr.nodeName] = attr.nodeValue;
            }
          }
          return jsonTags;
        };

        FilesChanged.prototype.wrapFile = function(file) {
          return $(file).wrap('<div>').parent();
        };

        FilesChanged.prototype.getTagsInFile = function($file) {
          return $file.find('layout');
        };

        FilesChanged.prototype.compile = function(o) {
          var file, name, patt, value, _ref;

          file = filesStorage.files[this.jsonTags[o.tagNum].key];
          _ref = this.jsonTags[o.tagNum];
          for (name in _ref) {
            value = _ref[name];
            patt = new RegExp("\\$" + name, 'gi');
            file = file.replace(patt, value);
          }
          return file;
        };

        return FilesChanged;

      })();
      return filesChanged = new FilesChanged({
        files: this.files
      });
    });
  };

}).call(this);
