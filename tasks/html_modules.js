// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";  module.exports = function(grunt) {
    var $, Files, data, filesStorage, fs;

    fs = require('fs');
    $ = require('jquery');
    data = {};
    Files = (function() {
      function Files(o) {
        this.o = o;
        this.fs = fs;
        this.dir = 'tasks/src/';
        this.files = {};
      }

      Files.prototype.readFiles = function() {
        var _this = this;

        this.dfr = new $.Deferred;
        this.fs.readdir(this.dir, function(err, files) {
          if (err) {
            throw err;
          }
          files = _this.getValidFiles(files);
          return files.forEach(function(file, i) {
            return fs.readFile(_this.dir + file, 'utf-8', function(err, html) {
              err && ((function() {
                throw err;
              })());
              _this.files[file.split('.')[0]] = html;
              if (i === files.length - 1) {
                return _this.dfr.resolve(_this.files);
              }
            });
          });
        });
        return this.dfr.promise();
      };

      Files.prototype.getValidFiles = function(files) {
        return files.filter(function(file) {
          return file.match(/.html$/gi);
        });
      };

      return Files;

    })();
    filesStorage = new Files;
    return grunt.registerMultiTask("html_modules", "allows to include small html parts in other html", function() {
      var FilesChanged, filesChanged;

      FilesChanged = (function() {
        function FilesChanged(o) {
          var _this = this;

          this.o = o;
          this.files = [];
          this.compiled = '';
          filesStorage.readFiles().then(function(files) {
            return _this.getFiles().then(function() {});
          });
        }

        FilesChanged.prototype.getFiles = function() {
          var _this = this;

          this.dfr = new $.Deferred;
          this.o.files.forEach(function(f) {
            var attr, file, i, src, tagNum, z, _i, _j, _k, _len, _len1, _ref, _ref1, _results;

            _this.f = f;
            src = f.src.filter(function(filepath) {
              filepath = filepath;
              if (!grunt.file.exists(filepath)) {
                grunt.log.warn("Source file \"" + filepath + "\" not found.");
                return false;
              } else {
                return true;
              }
            }).map(function(filepath) {
              return grunt.file.read(filepath);
            });
            _results = [];
            for (z = _i = 0, _len = src.length; _i < _len; z = ++_i) {
              file = src[z];
              _this.$destFile = _this.wrapFile(file);
              _this.$tags = _this.getTagsInFile(_this.$destFile);
              for (tagNum = _j = 0, _ref = _this.$tags.length; 0 <= _ref ? _j < _ref : _j > _ref; tagNum = 0 <= _ref ? ++_j : --_j) {
                _this.files[j] = {};
                _ref1 = _this.$tags[j].attributes;
                for (i = _k = 0, _len1 = _ref1.length; _k < _len1; i = ++_k) {
                  attr = _ref1[i];
                  _this.files[j][attr.nodeName] = attr.nodeValue;
                }
                _this.compile(j, f);
                if (j === _this.$tags[j].attributes.length - 1) {
                  _this.dfr.resolve(_this.files);
                }
              }
              _results.push(grunt.file.write("dest/" + _this.f.src[0], _this.$destFile.html()));
            }
            return _results;
          });
          return this.dfr.promise();
        };

        FilesChanged.prototype.wrapFile = function($file) {
          return $(file).wrap('<div>').parent();
        };

        FilesChanged.prototype.getTagsInFile = function($file) {
          return $file.find('layout');
        };

        FilesChanged.prototype.compile = function(j, f) {
          var file, name, patt, value, _ref;

          file = filesStorage.files[this.files[j].key];
          _ref = this.files[j];
          for (name in _ref) {
            value = _ref[name];
            patt = new RegExp("\\$" + name, 'gi');
            file = file.replace(patt, value);
          }
          return $(this.$tags[j]).replaceWith(file);
        };

        return FilesChanged;

      })();
      return filesChanged = new FilesChanged({
        files: this.files
      });
    });
  };

}).call(this);
